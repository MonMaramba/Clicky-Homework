{"version":3,"sources":["components/jumbotron/jumbotron.js","components/cards/cards.js","components/gameContainer/gameContainer.js","App.js","serviceWorker.js","index.js"],"names":["jumbotron","react_default","a","createElement","className","Cards","props","key","id","onClick","handleClick","clicked","name","src","image","alt","GameContainer","state","images","message","score","topScore","imageOrder","_this","forEach","index","setState","sort","Math","random","_this$state","newScore","newTopScore","_this2","this","map","cards_cards","Component","App","components_jumbotron_jumbotron","gameContainer_gameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"64EAYeA,SATG,kBACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,oBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gFCSGC,SAbD,SAAAC,GAAK,OACfL,EAAAC,EAAAC,cAAA,OACAC,UAAU,WACVG,IAAKD,EAAME,GACXC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAME,GAAIF,EAAMK,WAC7CV,EAAAC,EAAAC,cAAA,OACAK,GAAIF,EAAMM,KACVC,IAAKP,EAAMQ,MACXC,IAAKT,EAAMM,iBCgEJI,oNArEXC,MAAQ,CACJC,SACAC,QAAS,qBACTC,MAAO,EACPC,SAAU,KAGdX,YAAc,SAACF,EAAIG,GACf,IAAMW,EAAaC,EAAKN,MAAMC,OAE9B,GAAIP,EAIA,OAHAW,EAAWE,QAAQ,SAACV,EAAOW,GACvBH,EAAWG,GAAOd,SAAU,IAEzBY,EAAKG,SAAS,CACjBZ,MAAOQ,EAAWK,KAAK,kBAAMC,KAAKC,SAAW,KAC7CV,QAAS,6BACTC,MAAO,IAIXE,EAAWE,QAAQ,SAACV,EAAOW,GACnBjB,IAAOM,EAAMN,KACbc,EAAWG,GAAOd,SAAU,KAHnC,IAAAmB,EAO2BP,EAAKN,MAAzBI,EAPPS,EAOOT,SACFU,EARLD,EAOiBV,MACM,EAClBY,EAAcD,EAAWV,EAAWU,EAAWV,EAErD,OAAOE,EAAKG,SAAS,CACjBZ,MAAOQ,EAAWK,KAAK,kBAAMC,KAAKC,SAAW,KAC7CV,QAAS,sBACTC,MAAOW,EACPV,SAAUW,6EAKb,IAAAC,EAAAC,KACL,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,SAAI+B,KAAKjB,MAAME,UAEnBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,mBAAW+B,KAAKjB,MAAMG,MAAtB,iBAA2Cc,KAAKjB,MAAMI,WAE5DpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACV8B,KAAKjB,MAAMC,OAAOiB,IAAI,SAAArB,GAAK,OACxBb,EAAAC,EAAAC,cAACiC,EAAD,CACM7B,IAAKO,EAAMN,GACXA,GAAIM,EAAMN,GACVI,KAAME,EAAMF,KACZD,QAASG,EAAMH,QACfG,MAAOA,EAAMA,MACbJ,YAAauB,EAAKvB,0BA5DtB2B,cCObC,SAPH,kBACVrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,SCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80693c0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./jumbotron.css\";\r\n\r\nconst jumbotron = () => (\r\n    <div className = \"jumbotron jumbotron-fluid\">\r\n        <div className=\"container text-center\">\r\n            <h1 className=\"display-4\">The Clicky Game!</h1>\r\n            <p className=\"lead\">Earn points by clicking on the images</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default jumbotron;","import React from 'react';\r\nimport \"./cards.css\";\r\n\r\nconst Cards = props => (\r\n    <div\r\n    className=\"allCards\"\r\n    key={props.id}\r\n    onClick={() => props.handleClick(props.id, props.clicked)}>\r\n        <img\r\n        id={props.name}\r\n        src={props.image}\r\n        alt={props.name}\r\n        />    \r\n    </div>\r\n)\r\n\r\nexport default Cards;","import React, { Component } from 'react';\r\nimport Cards from '../cards';\r\nimport images from \"../../images.json\";\r\nimport \"./gameContainer.css\";\r\n\r\nclass GameContainer extends Component {\r\n    state = {\r\n        images,\r\n        message: \"Click any to start\",\r\n        score: 0,\r\n        topScore: 0\r\n    };\r\n\r\n    handleClick = (id, clicked) => {\r\n        const imageOrder = this.state.images;\r\n\r\n        if (clicked) {\r\n            imageOrder.forEach((image, index) => {\r\n                imageOrder[index].clicked = false;\r\n            });\r\n            return this.setState({\r\n                image: imageOrder.sort(() => Math.random() - 0.5),\r\n                message: \"Sorry, that was incorrect!\",\r\n                score: 0\r\n            })\r\n        }\r\n        else {\r\n            imageOrder.forEach((image, index) => {\r\n                if (id === image.id) {\r\n                    imageOrder[index].clicked = true;\r\n                }\r\n            });\r\n\r\n            const { topScore, score } = this.state;\r\n            const newScore = score +1;\r\n            const newTopScore = newScore > topScore ? newScore : topScore;\r\n\r\n            return this.setState({\r\n                image: imageOrder.sort(() => Math.random() - 0.5),\r\n                message: \"You got that right!\",\r\n                score: newScore,\r\n                topScore: newTopScore\r\n            })\r\n        }\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid cardContainer\">\r\n                <div className=\"gameMessage text-center\">\r\n                    <p>{this.state.message}</p>\r\n                </div>\r\n                <div className=\"gameScores text-center\">\r\n                    <p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\r\n                </div>\r\n              <div className=\"container\">\r\n                  \r\n                  <div className=\"row col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\">\r\n                      {this.state.images.map(image => (\r\n                          <Cards\r\n                                key={image.id}\r\n                                id={image.id}\r\n                                name={image.name}\r\n                                clicked={image.clicked}\r\n                                image={image.image}\r\n                                handleClick={this.handleClick}\r\n                                />\r\n                      ))}\r\n                      </div>\r\n                    </div>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\nimport Jumbotron from \"./components/jumbotron/jumbotron\";\nimport GameContainer from \"./components/gameContainer\";\nimport './App.css';\n\nconst App = () => (\n  <div className=\"container-fluid mainContainer\">\n    <Jumbotron />\n    <GameContainer />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}